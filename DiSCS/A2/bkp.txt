int k = 1, flag = 1;
				while(inputStr[k] != '\0')
				{
					if(inputStr[k] == str[i+1][j]) //1
					{
						i = i+1;
						k++;
						continue;
					}
					else if(inputStr[k] == str[i][j+1]) //2
					{
						j = j+1;
						k++;
						continue;
					}
					else if(inputStr[k] == str[i+1][j+1]) //3
					{
						i = i+1;
						j = j+1;
						k++;
						continue;
					}
					else if(inputStr[k] == str[i-1][j]) //4
					{
						i = i-1;
						k++;
						continue;
					}
					else if(inputStr[k] == str[i][j-1]) //5
					{
						j = j-1;
						k++;
						continue;
					}
					else if(inputStr[k] == str[i-1][j-1]) //6
					{
						i = i-1;
						j = j-1;
						k++;
						continue;
					}
					else if(inputStr[k] == str[i+1][j-1]) //7
					{
						i = i+1;
						j = j-1;
						k++;
						continue;
					}
					else if(inputStr[k] == str[i-1][j+1]) //8
					{
						i = i+1;
						j = j+1;
						k++;
						continue;
					}
					else
					{
						flag = 0;
						break;
					}
				}
				
				if(flag == 1) count++;
				
				
				
				
				
				
				
//G.c				
void checkCycle(int N, int gph[][N], int vis[], int curr_node, int flag)
{
	vis[curr_node]++;
	if(vis[curr_node] >2)
		return;
	for(int j = 0; j < N; j++)
	{
		if(gph[curr_node][j] == 1)
		{
			if(vis[j]>=1)
			{
				flag = 1;
				printf("Deadlock\n");
			}
			
			checkCycle(N, gph, vis, j, flag);
				
			if(flag == 1)
			{
				nodeArr[count] = j;
				count++;
			}
		}		
	}
}





//A.c
#include <stdio.h>

int pathCount = 0;
int pathNodes[2000][2000];

void dfs(int N, int gph[][N], int vis[], int curr_node, int len, int pathLens[], int dest)
{
	vis[curr_node] = 1;
	for(int j = 0; j < N; j++)
	{
		if(gph[curr_node][j] == 1 && !vis[j] && j == dest)
		{
			printf("In final///Curr node - %d;; len - %d\n", j, len);
			pathNodes[pathCount][len] = j;
			len++;
			pathLens[pathCount] = len;
			pathCount++;
		}
		
		else if(gph[curr_node][j] == 1 && !vis[j])
		{
			printf("Curr node - %d;; len - %d\n", curr_node, len);
			pathNodes[pathCount][len] = curr_node;
			len++;
			dfs(N, gph, vis, j, len, pathLens, dest);
		}
	}
}

int main()
{
	int N, M;
	scanf("%d%d", &N, &M);
	
	int pathLens[N*N];
	for(int i = 0; i < N*N; i++)
		pathLens[i] = 0;
		
	int vis[N];
	for(int i = 0; i < N; i++)
		vis[i] = 0;
		
	int gph[N][N];
	for(int i = 0; i < N; i++)
		for(int j = 0; j < N; j++)
			gph[i][j] = 0;
			
	int x, y;
	for(int i = 0; i < M; i++)
	{
		scanf("%d%d", &x, &y);		
		gph[x-1][y-1] = 1;
		gph[y-1][x-1] = 1;
	}
	
	int src, dest;
	scanf("%d%d", &src, &dest);
	
	dfs(N, gph, vis, src-1, 0, pathLens, dest-1);
	
	/*if(pathCount == 0)
	{
		printf("-1\n");
		return 0;
	}*/
	
		
	printf("%d", pathCount);			
	printf("\n");
	for(int i = 0; i < pathCount; i++)
		printf("%d ", pathLens[i]);
		
	printf("\n");	
	for(int i = 0; i < pathLens[0]; i++)
		printf("%d ", pathNodes[0][i]+1);
		
	printf("\n");
	
	return 0;
}
	

